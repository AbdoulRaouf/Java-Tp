public class Administrateur extends Personne{
    private Stock stock;

    public Administrateur() {
        stock=new Stock();
    }

    public Administrateur(String cin, String nom, String prenom, Adress adress, Stock stock) {
        super(cin, nom, prenom, adress);
        this.stock = stock;
    }

    public Stock getStock() {
        return stock;
    }

    public void setStock(Stock stock) {
        this.stock = stock;
    }
    public void AjouterArticle(Article article, Long quatite){
        stock.ajouterArticle(article, quatite);
    }
    public void Modifier(String reference){
        for (Element element:stock.getArticleList()) {
            if(element.getReference()==reference){
                element.Modifier(reference, numbre, numbre);
            }
        } 

    }
    public void SupprimerArticle(String reference){
        for (Element element:stock.getArticleList()) {
            if(element.getReference()==reference){
                stock.suprimerArticle(reference);
            }
            
        }
    }
    public void AfficherStock(){
       for (Element element: stock.getArticleList()) {
        System.out.println(element.toString());
       }
    }
}

public class Adress {
    private String gouvernorat;
    private int codePostal;
    
    public Adress(String gouvernorat, int codepostal){
        this.gouvernorat=gouvernorat;
        this.codePostal=codepostal;
    }
    public String getGouvernorat(){
        return gouvernorat;
    }
    public int getCodePostal(){
        return codePostal;
    }
    public void setGouvernorat(String gouvernorat){
        this.gouvernorat=gouvernorat;
    }
    public void setCodePostal(int codePostal){
        this.codePostal=codePostal;
    }
    public String toString() {
        return "Adress " + "[gouvernorat = " + this.gouvernorat+
           " CodePostal " + this.codePostal + " ]";
     }
     
}

public abstract class AppareilInformatique extends Article implements Garantissable {
    private double resolutionEcran;
    private String processeur;
    private long ram;
    systemDexploitation systemDexploitation;
    private enum systemDexploitation{
        FreeDos,
        Windows,
        Ubuntu,
        Android,
        IOS

    }

    public AppareilInformatique(String nom, double prix) {
        super(nom, prix);
    }
    @Override
    public int getId() {
        // TODO Auto-generated method stub
        return super.getId();
    }
    @Override
    public String getNom() {
        // TODO Auto-generated method stub
        return super.getNom();
    }
    @Override
    public double getPrix() {
        // TODO Auto-generated method stub
        return super.getPrix();
    }
    @Override
    public String getReference() {
        // TODO Auto-generated method stub
        return super.getReference();
    }
    public String getProcesseur() {
        return processeur;
    }
    public long getRam() {
        return ram;
    }
    public double getResolutionEcran() {
        return resolutionEcran;
    }
    public systemDexploitation getSystemDexploitation() {
        return systemDexploitation;
    }
    @Override
    public void setNom(String nom) {
        // TODO Auto-generated method stub
        super.setNom(nom);
    }
    @Override
    public void setPrix(double prix) {
        // TODO Auto-generated method stub
        super.setPrix(prix);
    }
    @Override
    public void setReference(String reference) {
        // TODO Auto-generated method stub
        super.setReference(reference);
    }
    public void setProcesseur(String processeur) {
        this.processeur = processeur;
    }
    public void setRam(long ram) {
        this.ram = ram;
    }
    public void setResolutionEcran(double resolutionEcran) {
        this.resolutionEcran = resolutionEcran;
    }
    public void setSystemDexploitation(systemDexploitation systemDexploitation) {
        this.systemDexploitation = systemDexploitation;
    }
    @Override
    public String toString() {
        // TODO Auto-generated method stub
        return super.toString();
    }
    @Override
     public abstract int garantirAppareil();
}
public class Article {
    private static int nextId;
    private int id;
    private String nom;
    private String reference;
    private double prix;
    private String genererReference;

    public Article(String nom, double prix) {
        this.id=nextId++;
        this.nom=nom;
        this.prix=prix;
        this.reference=genererReference(nom, id);
      }
    String genererReference(String nom, int id){
        for(int i=0;i<nom.length();i++){
            if(nom.indexOf(i)%5==0){
                if(nom.charAt(i)!=' '){
                    reference=reference+nom.charAt(i);
                }
        }
        }
        reference+=id;
        return reference;
        
    }
    public int getId() {
        return id;
    }
    public String getReference() {
        return reference;
    }
    public String getNom() {
        return nom;
    }
    public double getPrix() {
        return prix;
    }
    public void setReference(String reference) {
        this.reference = reference;
    }
    public void setNom(String nom) {
        genererReference(nom, this.id);
        this.nom = nom;
    }
    public void setPrix(double prix) {
        this.prix = prix;
    }
    public void Modifier(String parametre){
        genererReference(nom, this.id);
        this.nom=parametre;
        
    }
    public void Modifier(String nom, double prix){
        genererReference = genererReference(nom, this.id);
        this.nom=nom;
        this.prix=prix;
    }
    public String toString(){
        return"Id: "+id+" nom: "+nom+" reference: "+reference+" prix: "+ prix;
    }
}

import java.util.ArrayList;

import javax.crypto.AEADBadTagException;

public class Client extends Personne {
    private ArrayList<Element> panier;

    public Client(ArrayList<Element> panier) {
        this.panier = panier;
    }

    public Client(String cin, String nom, String prenom, Adress adress, ArrayList<Element> panier) {
        super(cin, nom, prenom, adress);
        this.panier = panier;
    }

    public Client(String cin, String nom, String prenom, String gouvernorat, int codePostal,
            ArrayList<Element> panier) {
        super(cin, nom, prenom, gouvernorat, codePostal);
        this.panier = panier;
    }

    public ArrayList<Element> getPanier() {
        return panier;
    }

    public void setPanier(ArrayList<Element> panier) {
        this.panier = panier;
    }
    public Element trouverArticle(String reference){
        Element el=new Element();
        for (Element element : panier) {
            if(element.getReference()==reference){
                el=element;
                return el;
            }else{
                el=null;
            }
        }
        return el;
    }

    public void AjouterAuPanier(Stock stock, String reference, long quantite){

         
    }
    }

}

public class ComposantStockage extends AppareilInformatique implements Garantissable {
 
    
    /**
     * @param nom
     * @param prix
     * @param capacite
     */
    public ComposantStockage(String nom, double prix, int capacite) {
        super(nom, prix);
        this.capacite=capacite;
        //TODO Auto-generated constructor stub
    }
    private int capacite;
    
    public void setCapacite(int capacite) {
        this.capacite = capacite;
    }
    public int getCapacite() {
        return capacite;
    }
    @Override
    public String toString() {
        // TODO Auto-generated method stub
        return super.toString();
    }
    @Override
    public int garantirAppareil() {
        if(capacite<=500){
            return 1;
        }
        else{
            return 2;
        }
    }
    
}

public class Element {

    private Article article;
    private long quantite;

    public Element() {
    }
    public Element(Article article, long quantite){
        this.article=article;
        this.quantite=quantite;
    }
    public Element(String nom, double prix, long quantite){
        this.article.setNom(nom);
        this.article.setPrix(prix);
        this.quantite=quantite;
    }

    public Article getArticle() {
        return article;
    }
    public long getQuantite() {
        return quantite;
    }
    public String getReference(){
        return this.article.getReference();
    }
    public String getNomArticle(){
      return  this.article.getNom();
    }
    public double getPrixArticle(){
        return this.article.getPrix();
    }
    public void setArticle(Article article) {
        this.article = article;
    }
    public void incrementerQuantiter(long quantite){
        this.quantite=this.quantite+quantite;
    }
    public void decrementerQuantiter(long quantite){
        this.quantite=this.quantite-quantite;
    }

    public void Modifier(String nom, double prix, long quantite){
        Article article=new Article(nom, prix);
        this.article=article;
        this.quantite=quantite;
    }
    public boolean equals(String reference){
        return this.article.getReference()==reference;
    }
    public boolean equals(Article article){
        return this.article==article;
    }
    

    
    public String toString() {
        return "Element [ article: id = "+"<" +this.article.getId()+">, nom= <"+this.article.getNom()+"> ,reference= <"+this.getReference()+">, prix= <"+ this.article.getPrix()+">, quatite= <"+this.quantite+">";
    }
    
}

public interface Garantissable {
    public int garantirAppareil();

    Object clone() throws CloneNotSupportedException;

    @Override
    boolean equals(Object obj);

    void finalize() throws Throwable;

    @Override
    int hashCode();

    @Override
    String toString();
}

public class Mobile extends AppareilInformatique {

    private double appareiPhotoArriere;
    private double appareiPhotoFrontal;
    private int nbSim;
    private long capaciteBatterie;

    public Mobile(String nom, double prix,double appareiPhotoArriere,double appareiPhotoFrontal, int nbSim, long capaciteBatterie) {
        super(nom, prix);
        this.appareiPhotoArriere=appareiPhotoArriere;
        this.appareiPhotoFrontal=appareiPhotoFrontal;
        this.nbSim=nbSim;
        this.capaciteBatterie=capaciteBatterie;
        //TODO Auto-generated constructor stub
    }
    @Override
    public int getId() {
        // TODO Auto-generated method stub
        return super.getId();
    }
    @Override
    public String getNom() {
        // TODO Auto-generated method stub
        return super.getNom();
    }
    @Override
    public double getPrix() {
        // TODO Auto-generated method stub
        return super.getPrix();
    }
    public double getAppareiPhotoArriere() {
        return appareiPhotoArriere;
    }
    public double getAppareiPhotoFrontal() {
        return appareiPhotoFrontal;
    }
    public long getCapaciteBatterie() {
        return capaciteBatterie;
    }
    @Override
    public String getReference() {
        // TODO Auto-generated method stub
        return super.getReference();
    }
    public int getNbSim() {
        return nbSim;
    }
    @Override
    public void setNom(String nom) {
        // TODO Auto-generated method stub
        super.setNom(nom);
    }
    @Override
    public void setPrix(double prix) {
        // TODO Auto-generated method stub
        super.setPrix(prix);
    }
    @Override
    public void setReference(String reference) {
        // TODO Auto-generated method stub
        super.setReference(reference);
    }
    public void setAppareiPhotoArriere(double appareiPhotoArriere) {
        this.appareiPhotoArriere = appareiPhotoArriere;
    }
    public void setAppareiPhotoFrontal(double appareiPhotoFrontal) {
        this.appareiPhotoFrontal = appareiPhotoFrontal;
    }
    public void setCapaciteBatterie(long capaciteBatterie) {
        this.capaciteBatterie = capaciteBatterie;
    }
    public void setNbSim(int nbSim) {
        this.nbSim = nbSim;
    }
    @Override
    public String toString() {
        // TODO Auto-generated method stub
        return super.toString();
    }
    /* (non-Javadoc)
     * @see AppareilInformatique#garantirAppareil()
     */
    @Override
    public int garantirAppareil() {
        
        if(getPrix()>1000){
            return 2;
        }else{
            return 1;
        }
        
    }
}

public abstract class Ordinateur extends AppareilInformatique{

    private String alimentation;


    public Ordinateur(String nom, double prix) {
        super(nom, prix);

        //TODO Auto-generated constructor stub
    }
    @Override
    public int getId() {
        // TODO Auto-generated method stub
        return super.getId();
    }
    @Override
    public String getNom() {
        // TODO Auto-generated method stub
        return super.getNom();
    }
    @Override
    public double getPrix() {
        // TODO Auto-generated method stub
        return super.getPrix();
    }@Override
    public String getReference() {
        // TODO Auto-generated method stub
        return super.getReference();
    }public String getAlimentation() {
        return alimentation;
    }
    @Override
    public void setNom(String nom) {
        // TODO Auto-generated method stub
        super.setNom(nom);
    }@Override
    public void setPrix(double prix) {
        // TODO Auto-generated method stub
        super.setPrix(prix);
    }@Override
    public void setReference(String reference) {
        // TODO Auto-generated method stub
        super.setReference(reference);
    }public void setAlimentation(String alimentation) {
        this.alimentation = alimentation;
    }
    @Override
    public String toString() {
        // TODO Auto-generated method stub
        return super.toString();
    }
    public abstract int garantirAppareil();
   
}

public class OrdinateurDeBureau extends Ordinateur {

    private String alimentation;
    public OrdinateurDeBureau(String nom, double prix, String alimentation) {
        super(nom, prix);
        this.alimentation=alimentation;
        //TODO Auto-generated constructor stub
    }
    @Override
    public int getId() {
        // TODO Auto-generated method stub
        return super.getId();
    }
    @Override
    public String getNom() {
        // TODO Auto-generated method stub
        return super.getNom();
    }
    @Override
    public double getPrix() {
        // TODO Auto-generated method stub
        return super.getPrix();
    }
    @Override
    public String getReference() {
        // TODO Auto-generated method stub
        return super.getReference();
    }
    @Override
    public void setNom(String nom) {
        // TODO Auto-generated method stub
        super.setNom(nom);
    }
    @Override
    public void setPrix(double prix) {
        // TODO Auto-generated method stub
        super.setPrix(prix);
    }
    @Override
    public void setReference(String reference) {
        // TODO Auto-generated method stub
        super.setReference(reference);
    }
    @Override
    public String toString() {
        // TODO Auto-generated method stub
        return super.toString();
    }
    @Override
    public int garantirAppareil() {
        return 1;
    }
    
}

public class OrdinateurPortable extends Ordinateur{

    private long capaciteBatterie;

    public OrdinateurPortable(String nom, double prix, long capaciteBatterie) {
        super(nom, prix);
        this.capaciteBatterie=capaciteBatterie;
        //TODO Auto-generated constructor stub
    }
    @Override
    public int getId() {
        // TODO Auto-generated method stub
        return super.getId();
    }
    @Override
    public String getNom() {
        // TODO Auto-generated method stub
        return super.getNom();
    }
    @Override
    public double getPrix() {
        // TODO Auto-generated method stub
        return super.getPrix();
    }
    @Override
    public String getReference() {
        // TODO Auto-generated method stub
        return super.getReference();
    }
    public long getCapaciteBatterie() {
        return capaciteBatterie;
    }
    @Override
    public void setNom(String nom) {
        // TODO Auto-generated method stub
        super.setNom(nom);
    }
    @Override
    public void setPrix(double prix) {
        // TODO Auto-generated method stub
        super.setPrix(prix);
    }@Override
    public void setReference(String reference) {
        // TODO Auto-generated method stub
        super.setReference(reference);
    }
    public void setCapaciteBatterie(long capaciteBatterie) {
        this.capaciteBatterie = capaciteBatterie;
    }
    @Override
    public String toString() {
        // TODO Auto-generated method stub
        return super.toString();
    }
    @Override
    public int garantirAppareil() {

        return 2;
    }
}

public class Peripherique extends AppareilInformatique {
    public Peripherique(String nom, double prix,String technoligie, String interfaceAvecOrdinateur, Peripherique peripherique) {
        super(nom, prix);
        peripherique.technologieDeConnexion=technoligie;
        this.interfaceAvecOrdinateur=interfaceAvecOrdinateur;
        

        //TODO Auto-generated constructor stub
    }
    private String technologieDeConnexion;
    private String interfaceAvecOrdinateur;
    public String getInterfaceAvecOrdinateur() {
        return interfaceAvecOrdinateur;
    }
    public String getTechnologieDeConnexion() {
        return technologieDeConnexion;
    }
    public void setInterfaceAvecOrdinateur(String interfaceAvecOrdinateur) {
        this.interfaceAvecOrdinateur = interfaceAvecOrdinateur;
    }
    public void setTechnologieDeConnexion(String technologieDeConnexion) {
        this.technologieDeConnexion = technologieDeConnexion;
    }
    @Override
    public String toString() {
        // TODO Auto-generated method stub
        return super.toString();
    }
    @Override
    public int garantirAppareil() {
        // TODO Auto-generated method stub
        return 0;
    }
}

public abstract class Personne {
    private String cin;
    private String nom;
    private String prenom;
    private Adress adress;
    public int numbre;
    
    public Personne(){}
    public Personne(String cin, String nom, String prenom, Adress adress){
        this.cin=cin;
        this.nom=nom;
        this.prenom=prenom;
        this.adress=adress;
    }
    public Personne(String cin, String nom, String prenom, String gouvernorat, int codePostal){
        this.cin=cin;
        this.nom=nom;
        this.prenom=prenom;
        this.adress.setGouvernorat(gouvernorat);
        this.adress.setCodePostal(codePostal);
    }
    public void setCin(String cin){
        this.cin=cin;
    }
    public String getCin(){
        return this.cin;
    }
    public String getNom(){
        return this.nom;
    }
    public String getPrenom(){
        return this.prenom;
    }
    public Adress getAdress(){
        return this.adress;
    }
    public void setNom(String nom){
        this.nom=nom;
    }
    public void setPrenom(String prenom){
        this.prenom=prenom;
    }
    public void setAdress(Adress adress){
        this.adress=adress;
    }
    public String toString(){
        return " cin = " +this.cin +" Nom = "+this.nom + " Prenom = "+ this.prenom + " Adress " + "gouvernorat = " + adress.getGouvernorat()+" CodePostal= " + adress.getCodePostal();
    }
}

public class Produit {

    static int iddddd;

    int ID;
    String Reference;
    String nom;
    double prix;
    public Produit(){
        iddddd++;

        this.ID= iddddd;

    }

    public Produit(String nom, double prix){
        iddddd++;

        this.ID= iddddd;
        this.nom= nom;
        this.prix= prix;

    }



    public int getID() {
        return ID;
    }
    public String getNom() {
        return nom;
    }
    public double getPrix() {
        return prix;
    }
    public String getReference() {
        return Reference;
    }
    public void setID(int iD) {
        ID = iD;
    }
    public void setNom(String nom) {
        this.nom = nom;
    }
    public void setPrix(double prix) {
        this.prix = prix;
    }
    public void setReference(String reference) {
        Reference = reference;
    }
    String genererReference(String nom, int id){

        for(int i=0;i<nom.length();i++){
            if(nom.indexOf(i)%5==0){
                if(nom.charAt(i)!=' '){
                    Reference=Reference+nom.charAt(i);
                }
        }
        }
        Reference+=id;
        return Reference;
        
    }

   public String toString(){
        return "Produit [ id="+this.ID+" ; nom: "+nom+" ; prix= "+prix+" ; Ref= "+Reference+" ]";
    }

}

import java.util.ArrayList;
public class Stock {
    
    private ArrayList<Element> articleList;


    public Stock() {
        articleList=new ArrayList<Element>();
    }
    public Stock(ArrayList<Element> arrayList){

    }
    public Stock(ArrayList<String> nom, ArrayList<Double> prix, ArrayList<Long> quatite){

    }
    public ArrayList<Element> getArticleList() {
        return articleList;
    }
    public int getArticleNb(){
        return articleList.size();
    }
    public void setArticleList(ArrayList<Element> articleList) {
        this.articleList = articleList;
    }
    public void ajouterArticle(Article article, long quantite){
        Element element=new Element(article, quantite);
        articleList.add(element);

    }
    public void ajouterArticle(String nom, double prix,long quantite){
        Article article =new Article(nom, prix);
        ajouterArticle(article, quantite);
    }
    public void ajouterArticle(String nom, double prix,long quantite, String alimentation){
        OrdinateurDeBureau ordinateurDeBureau=new OrdinateurDeBureau(nom, prix, alimentation);
        ajouterArticle(ordinateurDeBureau, quantite);
    }
    public void ajouterArticle(String nom, double prix,long quantite, Long capacite){
        OrdinateurPortable ordinateurPortable=new OrdinateurPortable(nom, prix, capacite);
        ajouterArticle(ordinateurPortable, quantite);
    }
    public void ajouterArticle(String nom, double prix,long quantite, int capacite){
       ComposantStockage composantStockage=new ComposantStockage(nom, prix, capacite);
       ajouterArticle(composantStockage, quantite);
    }
    /**
     * @param nom
     * @param prix
     * @param quantite
     * @param tech
     */
    public void ajouterArticle(String nom, double prix,long quantite, String tech, String inter){
        Peripherique peripherique=new Peripherique(nom, prix, tech,inter);
        ajouterArticle(peripherique, quantite);
     }
    public Element trouverArticle(String reference){
        Element element=new Element(null, 0);
        for (Element ele : articleList) {
            if(ele.getReference()==reference){
                element=ele;
            }
        }
        return element;


    }
    public void modifierArticle(String reference, String nom, double prix, long quatite){
        for (Element element : articleList) {
            if(element.getReference()==reference){
                element=new Element(nom, prix, quatite);
            }
        }
    }
    public void suprimerArticle(String reference){
        for (Element element : articleList) {
            if(element.getReference()==reference){
                articleList.remove(element);
            }
        }
    }

    public void incrementerQuantiteArticle(String reference, long quantite){

        this.trouverArticle(reference).incrementerQuantiter(quantite);
        /*for (Element element : articleList) {
            if(element.getNomArticle()==reference){
                element.incrementerQuantiter(quantite);
            }*/
        
    }

    public void decrementerQuantiteArticle(String nom, long quantite){

        for (Element element : articleList) {
            if(element.getNomArticle()==nom){
                element.decrementerQuantiter(quantite);
            }
        }
    }
    
    public String toString(){
        String tousleselement="";
        for (Element element : articleList) {
           tousleselement= tousleselement + element.toString();
        }
        return tousleselement;
    }

}

import java.io.Console;
import java.util.ArrayList;
import java.util.Scanner;
public class TechStore {
    public static void affichageCroissant(ArrayList<Integer> ID,ArrayList <String> REF,ArrayList<String> NOM ,ArrayList <Double>Prix){

        int taille=Prix.size();
        double tmp =0;
        for(int i=0 ; i <taille ;i++){
            for(int j=1 ;j< (taille-i) ; j++){
                if (Prix.get(j-1)>Prix.get(j)){
                tmp=Prix.get(j-1);
                Prix.set(j-1,Prix.get(j));
                Prix.set(j,tmp);

                    String chaux = NOM.get(j-1);
                    NOM.set(j-1,NOM.get(j));
                    NOM.set(j,chaux);

                    String refaux = REF.get(j-1);
                    REF.set(j-1,REF.get(j));
                    REF.set(j,refaux);

                    int idaux = ID.get(j-1);
                    ID.set(j-1,ID.get(j));
                    ID.set(j,idaux);


                }
            }

        }



    }
    public static void affichageDecroissant(ArrayList<Integer> ID,ArrayList <String> REF,ArrayList<String> NOM ,ArrayList <Double>Prix){
        int taille=Prix.size();
        affichageCroissant(ID,REF,NOM,Prix);
        for(int c=0 ; c<taille/2;c++){
            double tmp=Prix.get(c);
            Prix.set(c,Prix.get(taille-c-1));
            Prix.set(taille-c-1,tmp);

            String chaux = NOM.get(c);
            NOM.set(c,NOM.get(taille-c-1));
            NOM.set(taille-c-1,chaux);

            String refaux = REF.get(c);
            REF.set(c,REF.get(taille-c-1));
            REF.set(taille-c-1,refaux);

            int idaux = ID.get(c);
            ID.set(c,ID.get(taille-c-1));
            ID.set(taille-c-1,idaux);


        }

    }
    public static String generateReference(String name,int id){
        String ref="";
        char ch =' ';
        for(int comp=0;((comp<name.length())&&(Character.compare(name.charAt(comp),ch)==0)) ; comp++){
            if(comp%5==0){
                ref+=name.charAt(comp);
            }
        }
        ref+=id;
        return ref;
    }
    public static void ajouterArticle(String name,Double price,ArrayList <String> REF,ArrayList <Double>Prix,ArrayList<String> NOM ,ArrayList<Integer> ID){
        int id=ID.size();
        NOM.add(name);
        Prix.add(price);
        ID.add(id);
        String newref = generateReference(name,id);
        REF.add(newref);
    }
    public static void supprimerArticle (String ref,ArrayList<Integer> ID,ArrayList <String> REF,ArrayList<String> NOM ,ArrayList <Double>Prix){
        int indexx = REF.indexOf(ref);
        if(indexx<=ID.size()) {
            ID.remove(indexx);
            REF.remove(indexx);
            NOM.remove(indexx);
            Prix.remove(indexx);
        }else System.out.println("cet article ne se trouve pas !");
    }
    public static void affichage(ArrayList<Integer> ID,ArrayList <String> REF,ArrayList<String> NOM ,ArrayList <Double>Prix){
        for(int t=0;t<=ID.size()-1;t++){
            System.out.print("ID="+ ID.get(t)+"\t");
            System.out.print("ref="+ REF.get(t)+"\t");
            System.out.print("Nom="+ NOM.get(t)+"\t");
            System.out.println("prix="+ Prix.get(t));
        }
    }
    public static void modifierArticle(ArrayList <String> REF,String ref,ArrayList <Double>Prix,Double prix){

        int compteur = REF.indexOf(ref);
        Prix.set(compteur,prix);

    }
    public static void main(String[] args) {
        ArrayList<Integer> ID = new ArrayList<Integer>();
        for (int j = 0; j < 5; j++) {
            ID.add(j);
        }
        ArrayList<String> REF = new ArrayList<String>();
        REF.add("Prelt50");
        REF.add("ÉeB21");
        REF.add("SpNo2");
        REF.add("Mu8a3");
        REF.add("SpA4");
        ArrayList<String> NOM = new ArrayList<String>();
        NOM.add("PC DELL");
        NOM.add("JBL");
        NOM.add("infinix");
        NOM.add("casque");
        NOM.add("Nokia");
        ArrayList<Double> Prix = new ArrayList<Double>();
        Prix.add(12.7);
        Prix.add(12.6);
        Prix.add(12.0);
        Prix.add(12.1);
        Prix.add(12.3);

        System.out.println("Soyer les bienvenus !!");
        System.out.println("0: Gerant");
        System.out.println("1: Client");
        Scanner scanner = new Scanner(System.in);
        int i = scanner.nextInt();

        if (i == 0) {
            System.out.println( "0:ajouter un article\n" +
                    "1: Augmenter la quatité d'un article\n"+
                    "2:Modifier un article\n" + 
                    "3:supprimer un article" + 
                    "4:consulter les articles\n"+
                    "5: Quitter\n");
            int strr = scanner.nextInt();

            switch (strr) {
                case 0:{
                    System.out.println("Nom du produit à ajouter:");
                    String name = scanner.next();
                    System.out.println("Prix:");
                    Double prix = scanner.nextDouble();
                    ajouterArticle(name, prix, REF, Prix, NOM, ID);
                break;}
                case 1:{
                    
                }

                case 2: {
                    System.out.println("Reference du produit à modifier:");
                    String ref = scanner.next();
                    //scanner.next();
                    System.out.println("Prix");
                    Double prixx = scanner.nextDouble();
                    modifierArticle(REF, ref, Prix, prixx);


                    break;
                }
                case 4: {
                    System.out.println("0 : ordre croissant des prix:\n" + "1 :ordre decroissant des prix");
                    int o = scanner.nextInt();
                    if (o == 0) {
                        affichageCroissant(ID, REF, NOM, Prix);
                    } else if (o == 1) {
                        affichageDecroissant(ID, REF, NOM, Prix);
                    } else
                        System.out.println("operation non valide!!");
                    break;
                }
                case 3: {
                    System.out.println("Reference du produit à supprimer:");
                    String reff = scanner.next();
                    supprimerArticle(reff, ID, REF, NOM, Prix);
                    break;
                }
                case 5:{
                System.out.println("reference");
                    break;
                }
                default:
                    System.out.printf("veuillez bien choisir !");
            }
            affichage(ID,REF,NOM,Prix);
        } else if (i == 1) {
            System.out.println("Bonjour cher/chere Client");
        } else
            System.out.println("Cette action n'est pas autorisé");


    }

}
public class Test {


	/*public static void main(String[] args){
        Adress a1=new Adress("Monastir", 5000);

        System.out.println(a1.toString());

        Adress a2= new Adress("ben arous", 1133);

        System.out.println(a1.toString());

        Adress a3=new Adress("ben arous", 1145);

        //System.out.println(a3.toString());

        a2=a3;

        System.out.println(a2.toString());
        
        Adress aP1=new Adress("jendouba", 8160);

        Personne p1=new Personne("1111111", "Kbayer", "Jasser",aP1);

        System.out.println("la personne P1 : " +p1.toString());
        
        Adress ap2=new Adress("monastir", 5000);

        Personne p2= new Personne("02222222", "Smida", "Ghayth", ap2);
        
        System.out.println("la personne P2 : " +p2.toString());

        p1.setNom(p2.getNom());

        p1.setPrenom("Jasser");

        p1.setAdress(ap2);

        System.out.println("la personne P1 : " +p1.toString());
        
        p2.setNom("Kbayer");

        p2.setAdress(aP1);
        
        System.out.println("la personne P2 : " +p2.toString());

        p1.setNom(p2.getNom());

        p2.setNom("Smida");
        Adress app2=new Adress("Jendouba", 8196);
        p2.setAdress(ap2);
        System.out.println("la personne P1 : " +p1.toString());
        System.out.println("la personne P2 : " +p2.toString());
        
    }
    */
}

import java.util.ArrayList;
import java.util.Scanner;

public class Test3 {
    public static void main(){
        ArrayList<String> Nom = new ArrayList<String>();
        Nom.add("PC DELL");
        Nom.add("JBL");
        Nom.add("infinix");
        Nom.add("casque");
        Nom.add("Nokia");
        ArrayList<Double> Prix = new ArrayList<Double>();
        Prix.add(12.7);
        Prix.add(12.6);
        Prix.add(12.0);
        Prix.add(12.1);
        Prix.add(12.3);

        ArrayList<Long> quatite=new ArrayList<Long>();
        quatite.add((long) 1);
        quatite.add((long) 4);
        quatite.add((long) 3);
        quatite.add((long) 2);
        quatite.add((long) 7);
        
        Stock stock=new Stock();
        for(int i=0; i<5; i++){

            Article article=new Article(Nom.get(i),Prix.get(i));
            stock.ajouterArticle(article, quatite.get(i));
        }
        System.out.println("0: Gerant/n 1:client");
        Scanner scanner=new Scanner(System.in);
        int i= scanner.nextInt();
        switch(i){
            case 0:{
                System.out.println("0:ajouter article");
                System.out.println("1:augmenter la quantiter");
                System.out.println("2:moudifier l'article");
                System.out.println("3:supprimmer Article");
                System.out.println("4:Consilter le stock");
                int a=scanner.nextInt();
                switch(a){
                    case 0:{ 
                    System.out.println("le nom article");
                    String nom=scanner.nextLine();
                    System.out.println("prix");
                    double prix =scanner.nextDouble();
                    System.out.println("quatiter");
                    long quan=scanner.nextLong();
                    stock.ajouterArticle(nom, prix, quan);
                    break;
                }
                case 1:{
                    System.out.println("quatiter");
                    long quan=scanner.nextLong();
                    System.out.println("la reference");
                    String ref=scanner.nextLine();
                    stock.incrementerQuantiteArticle(ref, quan);
                    break;
                }
                case 2:{
                    System.out.println("le nom article");
                    String nom=scanner.nextLine();
                    System.out.println("prix");
                    double prix =scanner.nextDouble();
                    System.out.println("quatiter");
                    long quan=scanner.nextLong();
                    
                    System.out.println("la reference");
                    String ref=scanner.nextLine();
                    stock.modifierArticle(ref, nom, prix, quan);
                    break;
                }
                case 3:{
                    System.out.println("la reference");
                    String ref=scanner.nextLine();
                    stock.suprimerArticle(ref);

                    break;
                }
                case 4:{
                    stock.toString();
                    break;
                }
                case 5:{
                    System.out.println("Quitter");
                    
                    break;
                }

                }
                break;
            }
        }
        
    }
    
}
